"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { Play, CheckCircle, Clock, Gift, Users, MousePointer, FileText, Flame } from "lucide-react"

export default function TasksPage() {
  const [activeCategory, setActiveCategory] = useState("daily")

  const taskCategories = [
    { id: "daily", label: "‡¶¶‡ßà‡¶®‡¶ø‡¶ï ‡¶ï‡¶æ‡¶ú", icon: CheckCircle },
    { id: "video", label: "‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®", icon: Play },
    { id: "survey", label: "‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡ßá", icon: FileText },
    { id: "ads", label: "‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶®", icon: MousePointer },
    { id: "referral", label: "‡¶∞‡ßá‡¶´‡¶æ‡¶∞", icon: Users },
  ]

  const dailyTasks = [
    {
      id: 1,
      title: "‡¶¶‡ßà‡¶®‡¶ø‡¶ï ‡¶≤‡¶ó‡¶á‡¶®",
      titleEn: "Daily Login",
      description: "‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¶‡¶ø‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®",
      reward: 25,
      progress: 100,
      completed: true,
      icon: CheckCircle,
    },
    {
      id: 2,
      title: "‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü",
      titleEn: "Update Profile",
      description: "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®",
      reward: 50,
      progress: 75,
      completed: false,
      icon: Users,
    },
    {
      id: 3,
      title: "‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡¶¶‡ßá‡¶∞ ‡¶Ü‡¶Æ‡¶®‡ßç‡¶§‡ßç‡¶∞‡¶£",
      titleEn: "Invite Friends",
      description: "‡ß© ‡¶ú‡¶® ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡¶ï‡ßá ‡¶Ü‡¶Æ‡¶®‡ßç‡¶§‡ßç‡¶∞‡¶£ ‡¶ú‡¶æ‡¶®‡¶æ‡¶®",
      reward: 100,
      progress: 33,
      completed: false,
      icon: Users,
    },
  ]

  const videoTasks = [
    {
      id: 1,
      title: "‡¶¨‡¶ø‡¶®‡¶ø‡¶Ø‡¶º‡ßã‡¶ó ‡¶ü‡¶ø‡¶™‡¶∏ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì",
      description: "‡ß´ ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü‡ßá‡¶∞ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®",
      reward: 15,
      duration: "5:00",
      completed: false,
    },
    {
      id: 2,
      title: "‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü‡ßã ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ",
      description: "‡ß© ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü‡ßá‡¶∞ ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶Æ‡ßÇ‡¶≤‡¶ï ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì",
      reward: 10,
      duration: "3:00",
      completed: true,
    },
  ]

  const renderDailyTasks = () => (
    <div className="space-y-4">
      {/* Streak Bonus */}
      <Card className="bg-gradient-to-r from-orange-500 to-red-500 text-white border-0">
        <CardContent className="p-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <Flame className="h-8 w-8" />
              <div>
                <h3 className="font-bold">‡ß© ‡¶¶‡¶ø‡¶®‡ßá‡¶∞ ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶ï!</h3>
                <p className="text-sm opacity-90">‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶¨‡ßã‡¶®‡¶æ‡¶∏: ‡ß≥‡ßß‡ß¶‡ß¶</p>
              </div>
            </div>
            <Badge variant="secondary" className="bg-white/20 text-white">
              üî• ‡ß© ‡¶¶‡¶ø‡¶®
            </Badge>
          </div>
        </CardContent>
      </Card>

      {/* Daily Task Limit */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <span>‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶ï‡¶æ‡¶ú‡ßá‡¶∞ ‡¶∏‡ßÄ‡¶Æ‡¶æ</span>
            <Badge variant="outline">‡ß´/‡ßß‡ß¶</Badge>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <Progress value={50} className="mb-2" />
          <p className="text-sm text-gray-600">‡¶Ü‡¶∞‡¶ì ‡ß´‡¶ü‡¶ø ‡¶ï‡¶æ‡¶ú ‡¶¨‡¶æ‡¶ï‡¶ø</p>
        </CardContent>
      </Card>

      {/* Tasks List */}
      <div className="space-y-3">
        {dailyTasks.map((task) => (
          <Card key={task.id} className={task.completed ? "bg-green-50 border-green-200" : ""}>
            <CardContent className="p-4">
              <div className="flex items-center gap-4">
                <div
                  className={`w-12 h-12 rounded-full flex items-center justify-center ${
                    task.completed ? "bg-green-500" : "bg-blue-500"
                  }`}
                >
                  <task.icon className="h-6 w-6 text-white" />
                </div>
                <div className="flex-1">
                  <h3 className="font-semibold">{task.title}</h3>
                  <p className="text-sm text-gray-600">{task.description}</p>
                  <div className="flex items-center gap-2 mt-2">
                    <Progress value={task.progress} className="flex-1 h-2" />
                    <span className="text-xs text-gray-500">{task.progress}%</span>
                  </div>
                </div>
                <div className="text-right">
                  <p className="font-bold text-green-600">+‡ß≥{task.reward}</p>
                  {task.completed ? (
                    <Badge variant="secondary" className="bg-green-100 text-green-800">
                      ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®
                    </Badge>
                  ) : (
                    <Button size="sm" className="mt-1">
                      ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®
                    </Button>
                  )}
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  )

  const renderVideoTasks = () => (
    <div className="space-y-4">
      <Card>
        <CardHeader>
          <CardTitle>‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶¶‡ßá‡¶ñ‡ßá ‡¶Ü‡¶Ø‡¶º ‡¶ï‡¶∞‡ßÅ‡¶®</CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-sm text-gray-600 mb-4">‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶Æ‡ßÇ‡¶≤‡¶ï ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶Ü‡¶Ø‡¶º ‡¶ï‡¶∞‡ßÅ‡¶®</p>
          <div className="space-y-3">
            {videoTasks.map((task) => (
              <Card key={task.id} className={task.completed ? "bg-green-50" : "border-2 border-dashed"}>
                <CardContent className="p-4">
                  <div className="flex items-center gap-4">
                    <div className="w-16 h-12 bg-red-600 rounded flex items-center justify-center">
                      <Play className="h-6 w-6 text-white" />
                    </div>
                    <div className="flex-1">
                      <h3 className="font-semibold">{task.title}</h3>
                      <p className="text-sm text-gray-600">{task.description}</p>
                      <div className="flex items-center gap-2 mt-1">
                        <Clock className="h-4 w-4 text-gray-400" />
                        <span className="text-sm text-gray-500">{task.duration}</span>
                      </div>
                    </div>
                    <div className="text-right">
                      <p className="font-bold text-green-600">+‡ß≥{task.reward}</p>
                      {task.completed ? (
                        <Badge variant="secondary" className="bg-green-100 text-green-800">
                          ‡¶¶‡ßá‡¶ñ‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá
                        </Badge>
                      ) : (
                        <Button size="sm" className="mt-1 bg-red-600 hover:bg-red-700">
                          <Play className="h-4 w-4 mr-1" />
                          ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®
                        </Button>
                      )}
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  )

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm p-4">
        <h1 className="text-xl font-bold text-center">‡¶ï‡¶æ‡¶ú‡ßá‡¶∞ ‡¶ï‡ßá‡¶®‡ßç‡¶¶‡ßç‡¶∞</h1>
        <p className="text-sm text-gray-600 text-center">‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶Ø‡¶º ‡¶ï‡¶∞‡ßÅ‡¶®</p>
      </div>

      {/* Category Tabs */}
      <div className="bg-white border-b">
        <div className="flex overflow-x-auto p-2 gap-2">
          {taskCategories.map((category) => (
            <Button
              key={category.id}
              variant={activeCategory === category.id ? "default" : "outline"}
              size="sm"
              onClick={() => setActiveCategory(category.id)}
              className="whitespace-nowrap"
            >
              <category.icon className="h-4 w-4 mr-1" />
              {category.label}
            </Button>
          ))}
        </div>
      </div>

      {/* Content */}
      <div className="p-4">
        {activeCategory === "daily" && renderDailyTasks()}
        {activeCategory === "video" && renderVideoTasks()}

        {/* Placeholder for other categories */}
        {!["daily", "video"].includes(activeCategory) && (
          <Card>
            <CardContent className="p-8 text-center">
              <Gift className="h-12 w-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-semibold mb-2">‡¶∂‡ßÄ‡¶ò‡ßç‡¶∞‡¶á ‡¶Ü‡¶∏‡¶õ‡ßá</h3>
              <p className="text-gray-600">‡¶è‡¶á ‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó‡ßá‡¶∞ ‡¶ï‡¶æ‡¶ú‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶∂‡ßÄ‡¶ò‡ßç‡¶∞‡¶á ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá</p>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  )
}
